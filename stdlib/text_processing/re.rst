###
re
###

.. image:: img/alice-butenko-zstWUZFj77w-unsplash.jpg

El m√≥dulo `re`_ permite trabajar con `expresiones regulares`_. [#regex-unsplash]_

.. hint::
    Si tienes un problema y lo intentas resolver con expresiones regulares, entonces tienes dos problemas üòÖ -- An√≥nimo (N√≥tese la iron√≠a)

******************************
¬øQu√© es una expresi√≥n regular?
******************************

Una **expresi√≥n regular** (tambi√©n conocida como **regex** o **regexp** por su contracci√≥n anglosajona **reg**-ular **exp**-ression) es una cadena de texto que conforma un **patr√≥n de b√∫squeda**. Se utilizan principalmente para la *b√∫squeda de patrones* en cadenas de caracteres u *operaciones de sustituciones*.

Se trata de una herramienta ampliamente utilizada en las ciencias de la computaci√≥n y necesaria para multitud de aplicaciones que traten con informaci√≥n textual.

Pero... ¬øqu√© pinta tiene una expresi√≥n regular?

.. code-block::
    
    >>> regex = '^\d{8}[A-Z]$'

La expresi√≥n regular anterior nos permite comprobar que una cadena de texto dada es un DNI v√°lido. Si analizamos parte por parte tendr√≠amos lo siguiente:

- ``^`` comienzo de l√≠nea.
- ``\d{8}`` d√≠gito que se repite 8 veces.
- ``[A-Z]`` letra en may√∫sculas.
- ``$`` final de l√≠nea.

********
Sintaxis
********

Las expresiones regulares pueden contener tanto **caracteres especiales** como caracteres ordinarios. La mayor√≠a de los caracteres ordinarios, como ``'A'``, ``'b'``, o ``'0'`` son las expresiones regulares m√°s sencillas; simplemente se ajustan a s√≠ mismas.

Caracteres especiales
=====================

Existen una serie de caracteres que tienen un significado especial dentro de una expresi√≥n regular:

.. csv-table::
    :file: tables/regex-chars.csv
    :widths: 10, 50
    :header-rows: 1
    :class: longtable

Expresiones en crudo
====================

Cuando definimos una expresi√≥n regular es conveniente utilizar el :ref:`formato raw <core/datatypes/strings:expresiones literales>` en las cadenas de texto para que los caracteres especiales no pierdan su sem√°ntica.

Veamos un ejemplo con el tabulador::

    >>> regex = '\t[abc]$'
    >>> print(regex)
    	[abc]$

    >>> regex = r'\t[abc]$'  # formato crudo
    >>> print(regex)
    \t[abc]$

***********
Operaciones
***********

Buscar
======

La b√∫squeda de patrones es una de las principales utilidades de las expresiones regulares.

Supongamos que queremos buscar un n√∫mero de tel√©fono dentro de un texto. Para ello vamos a utilizar la funci√≥n `search()`_::

    >>> import re

    >>> text = 'Estar√© disponible en el +34755142009 el lunes por la tarde'

    >>> regex = r'\+?\d{2}\d{9}'
    >>> re.search(regex, text)
    <re.Match object; span=(24, 36), match='+34755142009'>

Esta funci√≥n devuelve un objeto de tipo :ref:`Match <stdlib/text_processing/re:coincidencia>` en cuya representaci√≥n podemos ver un campo ``span`` que nos indica el alcance de la concidencia::

    >>> text[24:36]
    '+34755142009'

En el ejemplo anterior estamos buscando un solo elemento. Imaginemos un caso en el que queremos buscar todas las cantidades de dinero que aparecen en un determinado texto. Para ello vamos a utilizar la funci√≥n `findall()`_::

    >>> text = 'El coste ascendi√≥ a 36‚Ç¨ m√°s un 12% de impuestos para un total de 40‚Ç¨'

    >>> re.findall(r'\d+‚Ç¨', text)
    ['36‚Ç¨', '40‚Ç¨']

Si utilizamos un **grupo de captura** (par√©ntesis) la funci√≥n ``findall()`` s√≥lo nos devolver√° aquellas coincidencias del grupo de captura::

    >>> re.findall(r'(\d+)‚Ç¨', text)
    ['36', '40']

En el caso de que queramos agrupar expresiones regulares con ``findall()`` sin que se capturen estos grupos debemos utilizar la sintaxis: ``(?:...)``


.. attention::
    La funci√≥n ``findall()`` no devuelve un objeto ``Match`` sino que retorna una lista con las cadenas de texto coincidentes.

Coincidencia
------------

El tipo de objeto `Match`_ es el utilizado en este m√≥dulo para representar una coincidencia.

Retomando el ejemplo anterior de la b√∫squeda del tel√©fono, veamos qu√© podemos hacer con este tipo de objetos::

    >>> text = 'Estar√© disponible en el +34755142009 el lunes por la tarde'

    >>> regex = r'\+?\d{2}\d{9}'
    >>> m = re.search(regex, text)

    >>> m
    <re.Match object; span=(24, 36), match='+34755142009'>

Si queremos acceder al texto completo coincidente, tenemos dos alternativas equivalentes::

    >>> m[0]
    '+34755142009'

    >>> m.group(0)
    '+34755142009'

Podemos conocer d√≥nde empieza y d√≥nde acaba el texto coincidente de la siguiente manera::

    >>> m.span()  # equivale a m.span(0)
    (24, 36)

Incluso hay una manera de acceder a estos √≠ndices por separado::

    >>> m.start()
    24

    >>> m.end()
    36

Grupos de captura
^^^^^^^^^^^^^^^^^

Los grupos de captura permiten "marcar" partes de la expresi√≥n regular para luego poder acceder a cada una de forma directa e independiente.

Para ejemplificar este comportamiento vamos a modificar ligeramente la expresi√≥n regular original del n√∫mero de tel√©fono y capturar tambi√©n el prefijo y el propio n√∫mero de tel√©fono::

    >>> m = re.search(r'\+?(\d{2})(\d{9})', text) 

.. tip::
    N√≥tese c√≥mo hemos tenido que **escapar** el s√≠mbolo ``+`` usando la barra invertida para quitarle su significado especial.

Ahora podemos acceder a los grupos capturados de la siguiente manera:

    >>> m[1]  # equivale a m.group(1)
    '34'
    >>> m[2]  # equivale a m.group(2)
    '755142009'

Igualmente podemos acceder a los √≠ndices de comienzo y fin de cada grupo capturado::

    >>> m.span(1)  # '34'
    (25, 27)

    >>> m.span(2)  # '755142009'
    (27, 36)

Si queremos una aproximaci√≥n m√°s "sem√°ntica", podemos **a√±adir nombres** a los **grupos de captura**::

>>> regex = r'\+?(?P<prefix>\d{2})(?P<number>\d{9})'
>>> m = re.search(regex, text)

Con este cambio ahora podemos **acceder a los grupos de captura por su nombre**::

    >>> m['prefix']  # equivale a m.group('prefix')
    '34'

    >>> m['number']  # equivale a m.group('number')
    '755142009'

Y tambi√©n existe la posibilidad de obtener el diccionario completo con los grupos capturados::

    >>> m.groupdict()
    {'prefix': '34', 'number': '755142009'}

Ignorar may√∫sculas y min√∫sculas
-------------------------------

Supongamos que debemos encontrar todas las vocales que hay en un determinado nombre. La primera aproximaci√≥n ser√≠a la siguiente::

    >>> name = 'Alan Turing'
    >>> regex = r'[aeiou]'

    >>> re.findall(regex, name)
    ['a', 'u', 'i']

Aparentemente est√° bien pero nos damos cuenta de que la primera ``A`` may√∫scula no est√° entre los resultados.

Este m√≥dulo de expresiones regulares establece una serie de "flags" que podemos pasar a las distintas funciones para modificar su comportamiento. Uno de los m√°s importantes es el que nos permite ignorar may√∫sculas y min√∫sculas: ``re.IGNORECASE``.

Veamos su aplicaci√≥n con el ejemplo anterior::

    >>> re.findall(regex, name, re.IGNORECASE)
    ['A', 'a', 'u', 'i']

Podemos "abreviar" esta constante de la siguiente manera::

    >>> re.findall(regex, name, re.I)
    ['A', 'a', 'u', 'i']

Separar
=======

Otras de las operaciones m√°s usadas con expresiones regulares es la separaci√≥n o divisi√≥n de una cadena de texto mediante un separador.

En su momento vimos el uso de la funci√≥n :ref:`split() <core/datastructures/lists:dividir una cadena de texto en lista>` para cadenas de texto, pero era muy limitada al especificar patrones avanzados.  Veamos el uso de la funci√≥n ``re.split()`` dentro de este m√≥dulo de expresiones regulares.

Un ejemplo muy sencillo ser√≠a **separar la parte entera de la parte decimal** en un determinado n√∫mero flotante::

    >>> regex = r'[.,]'

    >>> re.split(regex, '3.14')
    ['3', '14']

    >>> re.split(regex, '3,14')
    ['3', '14']

Vemos que la funci√≥n devuelve una lista con los distintos elementos separados.

.. caution::
    Aunque parezca muy sencillo, este ejemplo no se puede resolver de manera "directa" usando la funci√≥n ``split()`` de cadenas de texto.

Python tambi√©n nos da la posibilidad de "capturar" el separador. Siguiendo el ejemplo anterior:

.. code-block::
    :emphasize-lines: 1

    >>> regex = r'([.,])'  # par√©ntesis: a√±adimos grupo de captura

    >>> re.split(regex, '3.14')
    ['3', '.', '14']

    >>> re.split(regex, '3,14')
    ['3', ',', '14']


Reemplazar
==========

Este m√≥dulo de expresions regulares tambi√©n nos ofrece la posibilidad de reemplazar ocurrencias dentro de un texto.

A vueltas con el ejemplo del nombre de una persona, supongamos que recibimos la informaci√≥n en formato ``<nombre> <apellidos>`` y que la necesitamos en formato ``<apellidos>, <nombre>``. Veamos c√≥mo resolver este problema con la operaci√≥n de reemplazar::

    >>> name = 'Alan Turing'

    >>> regex = r'(\w+) +(\w+)'

    >>> repl = r'\2, \1'

    >>> re.sub(regex, repl, name)
    'Turing, Alan'

Hemos utilizado la funci√≥n ``re.sub()`` que recibe 3 par√°metros:

1. La expresi√≥n regular a localizar.
2. La expresi√≥n de reemplazo.
3. La cadena de texto sobre la que trabajar.

Dado que hemos utilizado *grupos de captura* podemos hacer referencia a ellos a trav√©s de sus √≠ndices mediante ``\1``, ``\2`` y as√≠ sucesivamente.

Al igual que ve√≠amos previamente, existe la posibilidad de nombrar los grupos de captura, y as√≠ facilitar la escritura de las expresiones de reemplazo::

    >>> name = 'Alan Turing'

    >>> regex = r'(?P<name>\w+) +(?P<surname>\w+)'

    >>> repl = r'\g<surname>, \g<name>'

    >>> re.sub(regex, repl, name)
    'Turing, Alan'

Esta funci√≥n admite un uso m√°s avanzado ya que podemos **pasar una funci√≥n** en vez de una cadena de texto de reemplazo, lo que nos abre un mayor rango de posibilidades.

Siguiendo con el caso anterior, supongamos que queremos hacer la misma transformaci√≥n pero convirtiendo el apellido a may√∫sculas, y asegurarnos de que el nombre queda como t√≠tulo::

    >>> name = 'Alan Turing'

    >>> regex = r'(\w+) +(\w+)'

    >>> re.sub(regex, lambda m: f'{m[2].upper()}, {m[1].title()}', name)
    'TURING, Alan'

.. seealso::
    Existe una funci√≥n ``re.subn()`` que devuelve una tupla con la nueva cadena de texto reemplazada y el n√∫mero de sustituciones realizadas.

Casar
=====

Si lo que estamos buscando es ver si una determinada cadena de texto "casa" (coincide) con un patr√≥n de expresi√≥n regular, podemos hacer uso de la funci√≥n ``re.fullmatch()``.

Veamos un ejemplo en el que comprobamos si un texto dado es un DNI v√°lido::

    >>> regex = r'\d{8}[A-Z]'

    >>> text = '54632178Y'

    >>> re.fullmatch(regex, text)  # devuelve un objeto Match
    <re.Match object; span=(0, 9), match='54632178Y'>

Si el patr√≥n no casa la funci√≥n devuelve ``None``::

    >>> text = '87896532$'

    >>> re.fullmatch(regex, text)  # devuelve None

    >>> re.fullmatch(regex, text) is None
    True

Todo esto lo podemos poner dentro una sentencia condicional haciendo uso adem√°s del :ref:`operador morsa <core/controlflow/conditionals:operador morsa>` para aprovechar la variable creada::

    >>> def check_id_card(text: str) -> None:
    ...     REGEX = r'\d{8}[A-Z]'
    ...     if m := re.fullmatch(REGEX, text):
    ...         print(f'{text} es un DNI v√°lido')
    ...         print(m.span())
    ...     else:
    ...         print(f'{text} no es un DNI v√°lido')
    ...
    
    >>> check_id_card('54632178Y')
    54632178Y es un DNI v√°lido
    (0, 9)
    
    >>> check_id_card('87896532$')
    87896532$ no es un DNI v√°lido

Hay una **variante m√°s "flexible"** para casar que es ``re.match()`` y comprueba la existencia del patr√≥n **s√≥lo desde el comienzo de la cadena**. *Es decir, que si el final de la cadena no coincide sigue casando*.

Continuando con el caso anterior de comprobaci√≥n de los DNI, podemos ver que a√±adir caracteres al final del documento de identidad no modifica el comportamiento de ``re.match()``::

    >>> regex = r'\d{8}[A-Z]'
    >>> text = '54632178Y###'

    >>> re.match(regex, text)
    <re.Match object; span=(0, 9), match='54632178Y'>

Sin embargo no sucede lo mismo si a√±adimos caracteres al principio y al final de la cadena::

    >>> regex = r'\d{8}[A-Z]'
    >>> text = '&&&54632178Y###'

    >>> re.match(regex, text) is None  # No casa!
    True

En cualquier caso podemos hacer que ``re.match()`` se comporte como ``re.fullmatch()`` si especificamos los **indicadores de comienzo y final de l√≠nea** en el patr√≥n:

.. code-block::
    :emphasize-lines: 1

    >>> regex = r'^\d{8}[A-Z]$'
    >>> text = '54632178Y'

    >>> re.match(regex, text)
    <re.Match object; span=(0, 9), match='54632178Y'>

.. tip::
    Tanto ``re.fullmatch()`` como ``re.match()`` devuelven un objeto de tipo :ref:`Match <stdlib/text_processing/re:coincidencia>` con lo que podemos hacer uso de todos sus m√©todos y atributos.

Compilar
========

Si vamos a utilizar una expresi√≥n regular una √∫nica vez entonces no debemos preocuparnos por cuestiones de rendimiento. Pero si repetimos su aplicaci√≥n, ser√≠a m√°s recomendable `compilar`_ la expresi√≥n regular a un patr√≥n para mejorar el rendimiento:

.. code-block::
    :emphasize-lines: 3

    >>> regex = r'\d+'

    >>> pat = re.compile(regex)

    >>> type(pat)
    re.Pattern

    >>> re.search(pat, '1:abc;10:def;100;ghi')
    <re.Match object; span=(0, 1), match='1'>

Aclaraciones sobre corchetes
============================

Los corchetes ``[]`` en una expresi√≥n regular tienen varios matices:

Los s√≠mbolos incluidos pierden su significado especial:
    .. code-block::

        >>> re.match(r'[.]', 'A')  # No casa!
        
        >>> re.match(r'[.]', '.')
        <re.Match object; span=(0, 1), match='.'>

El gui√≥n medio hay que escaparlo en situaciones donde no represente un rango:
    .. code-block::
        :emphasize-lines: 7

        >>> re.match(r'[-\d\s]', '-')  # No hay que escapar
        <re.Match object; span=(0, 1), match='-'>

        >>> re.match(r'[\d\s-]', '-')  # No hay que escapar
        <re.Match object; span=(0, 1), match='-'>

        >>> re.match(r'[\d\-\s]', '-') # Hay que escapar!
        <re.Match object; span=(0, 1), match='-'>


**********
Ejercicios
**********

1. :pypas:`vowel-words!`
2. :pypas:`valid-float!`
3. :pypas:`valid-email!`
4. :pypas:`calc-from-str!`
5. :pypas:`valid-url!`

.. --------------- Footnotes ---------------

.. [#regex-unsplash] Foto original de portada por `Alice Butenko`_ en Unsplash.

.. --------------- Hyperlinks ---------------

.. _Alice Butenko: https://unsplash.com/@alivka?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText
.. _re: https://docs.python.org/es/3/library/re.html
.. _expresiones regulares: https://es.wikipedia.org/wiki/Expresi%C3%B3n_regular
.. _findall(): https://docs.python.org/es/3/library/re.html#re.findall
.. _search(): https://docs.python.org/es/3/library/re.html#re.search
.. _Match: https://docs.python.org/es/3/library/re.html#match-objects
.. _compilar: https://docs.python.org/3/library/re.html#re.compile
